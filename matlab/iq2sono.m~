mfile = mfilename;
addpath('icp-algorithm-3')

mfile = mfilename;
%vtData = getenv('MUSIC_DATA');

startTime_s=0;
overWrite=-1; % -1 is return iqSet, don't save to mat 
fileVersion=3;

<<<<<<< HEAD
% legacy manually selected sets for processing:
%setlist_iq2sono

if 0
  spec = [];
  spec.HPFOrder=6;
  spec.cutHPF_Hz=50;
  spec.msWinLen = 50;
  spec.winOffsetFrac = 0.05;
  spec.spectralMethod = 'burg';   spec.binThresh=8e-14;
  spec.spectralMethod = 'fft';   spec.binThresh=9e-7;
  spec.posPGramFlag = 0;
  spec.isLog = 1;
  spec.isGray = 1;
=======
if 1
  inPath = fullfile(vtData, '0627MUSICPIG');
  inFilePrePre = 'FUS_pig_afterkataminepreFUS20240627_194601_sdl_s1_sg';
  inFilePre = [inFilePrePre]; 
  sgSel = [1:6];
  % indices in matrix to average over to get Doppler signal
  % generated by running offlinesdlarge, or otherwise
%   topInd = [418] %   421   380   419   379   420   377   378];  0627
end

if 0
  inPath = fullfile(vtData, '06272024MUSIC');
  inFilePrePre = 'PostPostFUS20240627_200144_sdl_s1_sg';
  inFilePre = [inFilePrePre]; 
  sgSel = [1:14];
  % indices in matrix to average over to get Doppler signal
  % generated by running offlinesdlarge, or otherwise
%   topInd = [ 423   379   384   422   383   382   380   381]; 0627
>>>>>>> 5c3cf1c (nxt_local)
end

plt=1;

numSeg = length(sgSel);
inFilesPre = [];
for q = 1:numSeg
  inFilesPre{q} = [inFilePrePre '_sg' num2str(sgSel(q))];
end

sonoImFull = [];
timeAxFull_s = [];

iqSet = [];
lastTime_s = 0;
for q = 1:numSeg
  [matFileDum, iqSets{q}] = readiqv2fn(inFilesPre{q}, startTime_s, inPath, ...
                                       fileVersion, overWrite);

  iqSet = iqSets{q};
  fs_Hz = iqSet.head.dopPRF;
  spec.T_s(1) = 1/fs_Hz; 
  sz = size(iqSet.IQMat);
  iqVecPre = reshape(iqSet.IQMat, [sz(1)*sz(2) sz(3)]);
  % mean across selected indices
  iqVec = [];
  iqVec{1} = mean(iqVecPre(topInd, :),1);

  % wavelet analysis
  if 0
    len = length(iqVec{1});
    tAx_s = 0:1/fs_Hz:(len-1)/fs_Hz;
    [cfs,f] = cwt(iqVec{1}(:), fs_Hz);
  
    hp = pcolor(tAx_s(:), log2(f), abs(cfs(:,:,2)));
    colormap(parula)
    hp.EdgeAlpha = 0;
    %  ylims = hp.Parent.YLim;
    %yticks = [-7:2]; %hp.Parent.YTick;
    %ylims = yticks([1 end]);
    cb = colorbar;
    cb.Label.String = 'Magnitude';
    axis tight
    hold on
    title('Magnitude scalogram')
    xlabel('Time (s)');
    ylabel('Frequency (Hz)');
    %  ylim(ylims);
    %hp.Parent.YTick = yticks;
    %ytickformat('%1.1f')
    %hp.Parent.YTickLabels = 2.^yticks;
    hold off
  end
              
  [sonoSession, env, sumPowerEnv] = calcsonofn(iqVec, spec, plt);

  sig=1;
  img =  sonoSession.sonoWav.int;
  sonoPlot(sig).isLog = spec.isLog; 
  sonoPlot(sig).isGray = spec.isGray; 
  sonoPlot(sig).title = spec.spectralMethod; 
  sonoPlot(sig).img = img;
  sonoPlot(sig).env = [];
 
  figure(sig);
  clf
  sonoSession.plotSono(sonoPlot);

  sonoImFull = cat(2, sonoImFull, sonoSession.sonoWav.int);
  timeAxFull_s = cat(2, timeAxFull_s, sonoSession.timeAx+lastTime_s);
  lastTime_s = lastTime_s + sonoSession.timeAx(end);
  
end

outMatFileBase =  [mfile '_' spec.spectralMethod '_' inFilePrePre '_' vec2commadelim(sgSel, 0, '_')];
outMatFilePre = fullfile(inPath, outMatFileBase);
outMatFile = [outMatFilePre '.mat'];

figure(2)
clf
imagesc(timeAxFull_s, sonoSession.fAx,  log10(sonoImFull), [10 20]);
colormap(gray)
axis xy
xlabel('time (s)')
ylabel('frequency (Hz)')
title(replacechar(inFilePrePre, '_', '\_'))

spec.inFilesPre = inFilesPre;
spec.fs_Hz = fs_Hz;
spec.fAx_Hz = sonoSession.fAx;

save(outMatFile, 'sonoImFull', 'spec')
lslrt(outMatFile)

