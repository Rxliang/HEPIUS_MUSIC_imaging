function offlinesd4p9p2fn(iqSet, IQMat, r, c)

persistent SDop

evParms = [];
evParms.SD = iqSet.evParms.SD;
evParms.state.semaphoreOpenedState = 0;
evParms.state.recording = 0;
evParms.state.SDOnlyInPlace = 1;
evParms.ev.nDopPRIs = iqSet.head.nDopPRIs;
evParms.gate.narrowbanding=0;
evParms.gate.rangeSubSampleIndex{1}=min(r):max(r);
evParms.gate.lateralSubSampleIndex{1}=min(c):max(c);
evParms.flag.offline=1;
evParms.ev.framePeriod_s = iqSet.nPRI*iqSet.ttna_s;
evParms.ev.dopPRF = iqSet.head.dopPRF;
evParms.flag.audioOn=0;
evParms.flag.instanceNoWithAudioEnabled=1;
evParms.state.CDIState=1; % irrelevant

evParms.ev.numSaveFramesPerBatch=1;

Trans.frequency = iqSet.head.freq_MHz;
nPulses = evParms.ev.nDopPRIs;
Resource.Parameters.speedOfSound = iqSet.c;
evParms.SD.titleFlow={'offline'};
evParms.SD.markerColorFlow = [ 1   1   0  ; 
                               0.2   1 .2];
evParms.SD.NWindow = round(iqSet.head.dopPRF*0.014)*2; 
evParms.SD.forceInit = 0;
evParms.flag.forceRecord=0;
assignin('base', 'evParms', evParms);
sgp= feval(@spectralDoppler_4p9p2_saveiq,'spectrogramParameters', ...
           evParms.ev.framePeriod_s,...
           evParms.SD.dopSweepTimeIndex);
sweepTime = sgp.THist;

%baseLineShiftNorm = -0.375;
st=1;
en=nPulses;

%lastFrameNo = length(iqParms.datenumVec);

lastPulseNo = size(IQMat, 3);

nDopPRIs = iqSet.head.nDopPRIs;
framePeriod = evParms.ev.framePeriod_s;
dopPRF = iqSet.head.dopPRF;
dopWFCutoffNorm  = evParms.SD.dopWFCutoffNorm;
dopSweepTimeIndex = evParms.SD.dopSweepTimeIndex;
baseLineShiftNorm = evParms.SD.baseLineShiftNorm;
SDDynRangeDB = evParms.SD.SDDynRangeDB;
NWindow = evParms.SD.NWindow;
SDDespeckle = evParms.SD.despeckle;

rSel = r %85:87;
cSel = c %85:87
while en <= lastPulseNo
    %st
    %en
%  spectralDoppler_jon_1(IQMat(:,:,st:en));
  % need to use function with any instanceNumber in suffix
  %  sdfn_1(IQMat(:,:,st:en));
    
  r = evalin('base', 'r');
  rSel = r;
          
  cSel = evalin('base', 'c');  
  
  inIQ = IQMat(rSel,cSel,st:en);
  spectralDoppler_4p9p2_saveiq(real(inIQ), imag(inIQ));
  pause(50e-3)
  
  stopFlag = evalin('base', 'stopFlag');
  
  
  if stopFlag
    break
  end
  
  
  st=en+1;
  en=en+nPulses;
%  pausede
end

  



end

